rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Function to check if a field exists and is a non-empty string
    function isNonEmptyString(fieldName) {
      return fieldName in request.resource.data &&
             request.resource.data[fieldName] is string &&
             request.resource.data[fieldName].size() > 0;
    }

    // Function to check if a field is the server timestamp upon creation/update
    function isServerTimestamp(fieldName) {
      // Allow server timestamp on create or update
      return request.resource.data[fieldName] == request.time;
    }

     // Function to check if a field is a timestamp or null
    function isTimestampOrNull(fieldName) {
      return request.resource.data[fieldName] == null || request.resource.data[fieldName] is timestamp;
    }

    // *** MOVED and KEPT: Function to validate memory session data ***
    function isMemorySessionDataValid(data) {
      // Check required fields and types for memory sessions
      return data.summary is string && data.summary.size() > 0 &&
             data.summarizedAt == request.time && // Check for server timestamp placeholder on create
             data.sourceMessageIds is list && data.sourceMessageIds.size() > 0 &&
             (data.tokenCount == null || data.tokenCount is number) && // Allow optional token count
             (data.metadata == null || data.metadata is map); // Allow optional metadata field, ensure it's a map if present
    }


    // ==== User Profiles (/users/{userId}) ====
    match /users/{userId} {
      // Allow owner to read their profile
      allow get: if isOwner(userId);

      // Allow owner to create their profile document only if it doesn't exist yet
      // Validate required fields upon creation
      allow create: if isOwner(userId)
                      && isNonEmptyString('uid') && request.resource.data.uid == userId
                      && isNonEmptyString('email')
                      && isNonEmptyString('displayName') // Ensure display name is provided
                      && isNonEmptyString('providerId')
                      && isServerTimestamp('createdAt')
                      && isServerTimestamp('lastLoginAt'); // lastLoginAt set on creation too

      // Allow owner to update specific fields
      allow update: if isOwner(userId)
                      // Ensure ONLY known fields exist in the *entire* document data after update
                      && request.resource.data.keys().hasOnly([
                            'uid', 'email', 'providerId', 'createdAt', // Immutable keys
                            'displayName', 'photoURL', 'lastLoginAt', // Mutable standard keys
                            'personaLastActive', 'personaLastSummaryTimestamp' // Mutable map keys ADDED
                          ])
                      // Ensure IMMUTABLE fields are NOT being written
                      && !('uid' in request.writeFields)
                      && !('email' in request.writeFields)
                      && !('providerId' in request.writeFields)
                      && !('createdAt' in request.writeFields)
                      // Validate types of fields being written (if they are part of the write)
                      && (!( 'displayName' in request.writeFields ) || request.resource.data.displayName is string)
                      && (!( 'photoURL' in request.writeFields ) || request.resource.data.photoURL == null || request.resource.data.photoURL is string)
                      && (!( 'lastLoginAt' in request.writeFields ) || request.resource.data.lastLoginAt == request.time)
                      // ADDED: Validate personaLastActive map update (assuming only server timestamps are added/updated)
                      && (!( 'personaLastActive' in request.writeFields ) || request.resource.data.personaLastActive is map) // Basic map check
                      // ADDED: Validate personaLastSummaryTimestamp map update
                      && (!( 'personaLastSummaryTimestamp' in request.writeFields ) || (
                            request.resource.data.personaLastSummaryTimestamp is map &&
                            // Optional: Add check if only one key is being updated and it's a server timestamp
                            // This is complex, simpler check might be sufficient if only app writes here
                            true // Simple validation: just ensure it's a map during update
                         ));

      // Disallow listing all users and deleting profiles (unless implementing deletion feature)
      allow list, delete: if false;
    }

    // ==== User Messages (/users/{userId}/messages/{messageId}) ====
    match /users/{userId}/messages/{messageId} {
        allow read: if isOwner(userId);
        allow create: if isOwner(userId)
                        && isNonEmptyString('role') && request.resource.data.role in ['user', 'assistant']
                        && isNonEmptyString('content')
                        && isNonEmptyString('persona') // Assumes persona is always required for a message
                        && request.resource.data.createdAt == request.time;
        allow update, delete: if false;
    }

    // ==== Per-Persona Summaries (/users/{userId}/personas/{personaId}/summaries/{summaryId}) ====
    match /users/{userId}/personas/{personaId}/summaries/{summaryId} {
        allow read: if isOwner(userId);
        allow create: if isOwner(userId)
                        && isNonEmptyString('summary')
                        && request.resource.data.createdAt == request.time; // Assuming timestamp field is createdAt
        allow update, delete: if false;
    }

    // ==== Per-Persona Session Metadata (/users/{userId}/personas/{personaId}/session/metadata) ====
    match /users/{userId}/personas/{personaId}/session/metadata {
        allow get: if isOwner(userId);
        allow create: if isOwner(userId)
                        && isTimestampOrNull('lastSummarizedMessageTimestamp');
        allow update: if isOwner(userId)
                        && request.writeFields.hasOnly(['lastSummarizedMessageTimestamp'])
                        && (request.resource.data.lastSummarizedMessageTimestamp == null || request.resource.data.lastSummarizedMessageTimestamp is timestamp);
        allow list, delete: if false; // list likely irrelevant for single doc, but good to be explicit
    }

    // ==== Memory Sessions (/users/{userId}/personas/{personaId}/memory_sessions/{sessionId}) ====
    match /users/{userId}/personas/{personaId}/memory_sessions/{sessionId} {
      allow list, get: if isOwner(userId);
      // This rule now correctly calls the function defined within the service scope
      allow create: if isOwner(userId) && isMemorySessionDataValid(request.resource.data);
      allow update, delete: if false;
    }

    // Add rules for any other top-level collections here if created later.
    // By default, access to any path not explicitly matched is denied.

  } // End match /databases/{database}/documents
} // End service cloud.firestore

// *** Redundant/Unused functions removed from here ***