rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Function to check if a field exists and is a non-empty string
    function isNonEmptyString(fieldName) {
      return fieldName in request.resource.data &&
             request.resource.data[fieldName] is string &&
             request.resource.data[fieldName].size() > 0;
    }

    // Function to check if a field is the server timestamp upon creation/update
    function isServerTimestamp(fieldName) {
      // Allow server timestamp on create or update
      return request.resource.data[fieldName] == request.time;
    }

     // Function to check if a field is a timestamp or null
    function isTimestampOrNull(fieldName) {
      return request.resource.data[fieldName] == null || request.resource.data[fieldName] is timestamp;
    }

    // Enhanced function to validate credit updates securely
    function isValidCreditUpdate() {
      let currentCredits = resource.data.credits;
      let newCredits = request.resource.data.credits;
      let lastCreditReset = request.resource.data.lastCreditReset;
      // Allow credit updates in these scenarios:
      // 1. Decrease by 1 (for message sending): current - 1
      // 2. Reset to 5 (daily reset): when new credits = 5
      // 3. Decrease from any amount to 0 (edge case handling)
      // If credits are being reset to 5, lastCreditReset must also be updated to server timestamp
      return (
        (newCredits == currentCredits - 1) ||
        (newCredits == 5 && lastCreditReset == request.time) ||
        (newCredits == 0) ||
        (newCredits >= 0 && newCredits <= 5)
      );
    }

    // Function to validate memory session data
    function isMemorySessionDataValid(data) {
      return isNonEmptyString('summary') &&
             data.summarizedAt == request.time &&
             data.sourceMessageIds is list && data.sourceMessageIds.size() > 0 &&
             data.messageCount is number && data.messageCount > 0 &&
             data.personaId is string &&
             (data.lastMessageTimestamp == null || data.lastMessageTimestamp is timestamp) &&
             (data.tokenCount == null || data.tokenCount is number) &&
             (data.metadata == null || data.metadata is map);
    }

    function isUserDataValid() {
      let data = request.resource.data;
      return isNonEmptyString('uid') && data.uid == request.auth.uid
          && isNonEmptyString('email')
          && isNonEmptyString('displayName')
          && isNonEmptyString('providerId')
          && data.credits == 5
          && data.monthlyResets == 0
          && isServerTimestamp('createdAt')
          && isServerTimestamp('lastLoginAt')
          && isServerTimestamp('lastCreditReset')
          && isServerTimestamp('monthlyCycleStart');
    }

    function isUserUpdateValid() {
      let data = request.resource.data;
      let writeFields = request.writeFields;
      return !('uid' in writeFields)
          && !('email' in writeFields)
          && !('providerId' in writeFields)
          && !('createdAt' in writeFields)
          && (!('credits' in writeFields) || (data.credits is number && data.credits >= 0))
          && (!('monthlyResets' in writeFields) || (data.monthlyResets is number && data.monthlyResets >= 0))
          && (!('lastCreditReset' in writeFields) || isServerTimestamp('lastCreditReset'))
          && (!('monthlyCycleStart' in writeFields) || isServerTimestamp('monthlyCycleStart'))
          && (!('photoURL' in writeFields) || (data.photoURL is string))
          && (!('lastLoginAt' in writeFields) || isServerTimestamp('lastLoginAt'));
    }

    function isMessageDataValid(data) {
      return isNonEmptyString('role') && data.role in ['user', 'assistant']
          && isNonEmptyString('content')
          && isNonEmptyString('persona')
          && data.createdAt == request.time;
    }

    function isPersonaDataValid() {
      let data = request.resource.data;
      return isNonEmptyString('name')
          && isNonEmptyString('description')
          && isNonEmptyString('context')
          && isServerTimestamp('createdAt');
    }

    // ==== User Profiles (/users/{userId}) ====
    match /users/{userId} {
      allow read: if isOwner(userId);
      allow create: if isOwner(userId) && isUserDataValid();
      allow update: if isOwner(userId) && isUserUpdateValid();
      allow delete: if false;

      // ==== User Subcollections ====

      // -- Messages --
      match /messages/{messageId} {
        allow read: if isOwner(userId);
        allow create: if isOwner(userId) && isMessageDataValid(request.resource.data);
        allow update, delete: if false; // Messages are immutable
      }

      // -- Per-Persona Data --
      match /personas/{personaId} {
        allow read: if isOwner(userId);
        allow create: if isOwner(userId) && isPersonaDataValid();
        allow update: if isOwner(userId); // more granular later
        allow delete: if isOwner(userId);

        // -- Memory Sessions (Summaries) --
        match /memory_sessions/{sessionId} {
          allow read: if isOwner(userId);
          allow create: if isOwner(userId) && isMemorySessionDataValid(request.resource.data);
          allow update, delete: if false; // Summaries are immutable
        }

        // -- Session Metadata --
        match /session/metadata {
          allow read: if isOwner(userId);
          allow create: if isOwner(userId) && isTimestampOrNull('lastSummarizedMessageTimestamp');
          allow update: if isOwner(userId) 
                         && request.writeFields.hasOnly(['lastSummarizedMessageTimestamp'])
                         && (request.resource.data.lastSummarizedMessageTimestamp == null || 
                             request.resource.data.lastSummarizedMessageTimestamp is timestamp);
          allow delete: if false;
        }
      }
    }
  }
}